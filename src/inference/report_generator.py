from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from datetime import datetime
import json
import io


class ReportGenerator:
    def __init__(self):
        self.page_width = letter[0]
        self.page_height = letter[1]

    def generate_pdf_report(self, results, patient_info, save_path):
        """
        Generate comprehensive PDF medical report
        """
        c = canvas.Canvas(save_path, pagesize=letter)

        # Header
        c.setFont("Helvetica-Bold", 20)
        c.drawString(50, self.page_height - 50, "Brain Tumor Analysis Report")

        # Date and patient info
        c.setFont("Helvetica", 12)
        c.drawString(50, self.page_height - 80,
                     f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}")

        if patient_info:
            c.drawString(50, self.page_height - 100,
                         f"Patient ID: {patient_info.get('id', 'N/A')}")
            c.drawString(50, self.page_height - 120,
                         f"Age: {patient_info.get('age', 'N/A')}")

        # Findings
        y_position = self.page_height - 160
        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, y_position, "FINDINGS:")

        y_position -= 30
        c.setFont("Helvetica", 11)

        # Tumor detection
        tumor_status = "DETECTED" if results['tumor_detected'] else "NOT DETECTED"
        c.drawString(70, y_position, f"Tumor Status: {tumor_status}")
        y_position -= 20

        if results['tumor_detected']:
            # Tumor type
            c.drawString(70, y_position,
                         f"Tumor Type: {results['tumor_type'].upper()}")
            y_position -= 20

            c.drawString(70, y_position,
                         f"Confidence: {results['confidence']:.2%}")
            y_position -= 20

            # Volume
            if 'volume' in results:
                c.drawString(70, y_position,
                             f"Volume: {results['volume']['volume_cm3']:.2f} cm³")
                y_position -= 20

            # Staging
            if 'staging' in results:
                c.drawString(70, y_position,
                             f"Grade: {results['staging']['grade']}")
                y_position -= 20
                c.drawString(70, y_position,
                             f"Malignancy: {results['staging']['malignancy']}")
                y_position -= 20
                c.drawString(70, y_position,
                             f"Prognosis: {results['staging'].get('prognosis', 'N/A')}")
                y_position -= 30

            # Shape features
            c.setFont("Helvetica-Bold", 14)
            c.drawString(50, y_position, "MORPHOLOGICAL ANALYSIS:")
            y_position -= 25

            c.setFont("Helvetica", 11)
            if 'shape_features' in results:
                features = results['shape_features']
                c.drawString(70, y_position,
                             f"Irregularity Index: {features.get('irregularity', 0):.3f}")
                y_position -= 20
                c.drawString(70, y_position,
                             f"Circularity: {features.get('circularity', 0):.3f}")
                y_position -= 20
                c.drawString(70, y_position,
                             f"Maximum Diameter: {results.get('max_diameter_mm', 0):.1f} mm")
                y_position -= 30

        # Recommendations
        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, y_position, "RECOMMENDATIONS:")
        y_position -= 25

        c.setFont("Helvetica", 11)
        if 'recommendations' in results:
            for rec in results['recommendations']:
                c.drawString(70, y_position, f"• {rec}")
                y_position -= 20
                if y_position < 100:
                    c.showPage()
                    y_position = self.page_height - 50

        # Footer
        c.setFont("Helvetica-Oblique", 9)
        c.drawString(50, 50,
                     "This report is generated by AI and should be reviewed by a qualified medical professional.")

        c.save()
        return save_path

    def generate_json_report(self, results, save_path):
        """
        Generate JSON report for integration with medical systems
        """
        report = {
            'timestamp': datetime.now().isoformat(),
            'version': '1.0',
            'analysis_results': {
                'tumor_detected': results['tumor_detected'],
                'tumor_type': results.get('tumor_type', None),
                'confidence_score': results.get('confidence', 0),
                'classification_probabilities': results.get('all_probabilities', {}),
                'volume_measurements': results.get('volume', {}),
                'shape_analysis': results.get('shape_features', {}),
                'staging_information': results.get('staging', {}),
                'maximum_diameter_mm': results.get('max_diameter_mm', 0),
                'clinical_recommendations': results.get('recommendations', [])
            },
            'metadata': {
                'model_version': 'BrainTumorAI_v1.0',
                'analysis_date': datetime.now().strftime('%Y-%m-%d'),
                'analysis_time': datetime.now().strftime('%H:%M:%S')
            }
        }

        with open(save_path, 'w') as f:
            json.dump(report, f, indent=2)

        return save_path